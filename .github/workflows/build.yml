name: build
on: [push, pull_request]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        build_type: [RelWithDebInfo, Debug]
        ui: [gui, cli]
        scripting: [lua, noscripts]
        exclude:
          - build_type: Debug
            ui: gui
          - build_type: RelWithDebInfo
            ui: cli
          - build_type: RelWithDebInfo
            scripting: noscripts
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - name: Install Dependencies
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y \
          libpixman-1-dev libfreetype6-dev libharfbuzz-dev zlib1g-dev \
          libx11-dev libxcursor-dev libxi-dev libxrandr-dev libgl1-mesa-dev \
          libfontconfig1-dev
    - name: Install Skia
      if: ${{ matrix.ui == 'gui' }}
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          this_dir=$(cygpath -u $(dirname "$0"))
          pushd "$this_dir" > /dev/null
        fi

        curl -L -O https://github.com/aseprite/skia-build/releases/download/m121-1/Skia-Linux-x64-Release.zip
        unzip Skia-Linux-x64-Release.zip -d skia
        rm Skia-Linux-x64-Release.zip

        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          popd > /dev/null
        fi
    - name: Prepare build environment
      shell: bash
      run: |
        if [[ "${{ matrix.build_type }}" == "Debug" ]] ; then
          export enable_ccache=off
        else
          export enable_ccache=on
        fi

        if [[ "${{ matrix.ui }}" == "gui" ]] ; then
          export laf_backend=skia
        else
          export laf_backend=none
        fi

        if [[ "${{ matrix.scripting }}" == "lua" ]] ; then
          export enable_scripting=on
        else
          export enable_scripting=off
        fi

        if [[ "${{ runner.os }}" == "macOS" ]] ; then
          export skia_arch=arm64
        else
          export skia_arch=x64
        fi

        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
          -DENABLE_TESTS=ON \
          -DENABLE_SCRIPTING=$enable_scripting \
          -DENABLE_CCACHE=$enable_ccache \
          -DLAF_BACKEND=$laf_backend \
          -DSKIA_DIR=$(realpath skia) \
          -DSKIA_LIBRARY_DIR=$(realpath skia/out/Release-$skia_arch)
    - name: Compiling
      shell: bash
      run: |
        cd build && ninja
    - name: Running C++ Tests
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          export XVFB=xvfb-run
        fi

        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          export ARTIFACTS_DIR=$(cygpath -w $(realpath artifacts))
          /cygdrive/c/Program\ Files/7-Zip/7z.exe a -t7z "$ARTIFACTS_DIR/tests.7z" tests
        fi
        $XVFB ./build/tests
    # This step uploads the compiled artifacts from the 'build' directory.
    # The 'actions/upload-artifact@v4' action is used for this purpose.
    - name: Uploading Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: build/
